"""
This module provides type definitions regarding pq-tuples.
"""

# pylint: disable=no-name-in-module, too-few-public-methods

from functools import reduce
from typing import List, Tuple
from pydantic import BaseModel


PQTuple = Tuple[str, str]
"""Type alias that represents a parameter-quality-tuple"""

class GeneratedPQTuples(BaseModel):
    """
    Class that contains all information about the pq-tuples that were generated by a
    `PQTupleGenerator`.
    """

    correlating_pq_tuples: List[PQTuple]
    """pq-tuples that represent a parameter-quality-correlation"""

    expert_knowledge: List[PQTuple]
    """pq-tuples that are known parameter-quality-correlations"""

    selected_parameters: List[str]
    """List of parameter-names that were used to generate the pq-tuples"""

    selected_qualities: List[str]
    """List of quality-names that were used to generate the pq-tuples"""

    def get_qualities_with_expert_knowledge(self) -> List[str]:
        """
        Returns the names of all qualities with exitsting expert knowledge.
        """
        return sorted(list(set([q for _, q in self.expert_knowledge])))

    def get_parameters_with_expert_knowledge(self) -> List[str]:
        """
        Returns the names of all parameters with exitsting expert knowledge.
        """
        return sorted(list(set([p for p, _ in self.expert_knowledge])))

    def get_qualities_affected_by_paramter(self, parameter: str) -> List[str]:
        """
        Returns the names of all qualities that are affected by the given parameter.
        """
        return [q for p, q in self.correlating_pq_tuples if p == parameter]

    def get_parameters_affecting_quality(self, quality: str) -> List[str]:
        """
        Returns the names of all parameters are affecting the given quality.
        """
        return [p for p, q in self.correlating_pq_tuples if q == quality]

    def get_parameters_affecting_qualites(self, qualities: List[str]) -> List[str]:
        """
        Returns the names of all parameters are affecting the given qualities.
        """
        parameters = reduce(
            lambda res, q: res | set(self.get_parameters_affecting_quality(q)),
            qualities,
            set()
        )
        return sorted(list(parameters))

    def get_expert_knowledge_for_qualities(self, qualities: List[str]) -> List[str]:
        """
        Returns the names of all parameters that are expert knowledge of the given qualities.
        """
        expert_knowledge = reduce(
            lambda res, q: res | set(p for p, _q in self.expert_knowledge if _q == q),
            qualities,
            set()
        )
        return sorted(list(expert_knowledge))

    def get_expert_knowledge_for_parameter(self, parameter: str) -> List[str]:
        """
        Returns the names of all qualties that are expert knowledge of the given parameter.
        """
        expert_knowledge = [q for (p, q) in self.expert_knowledge if p == parameter]
        return sorted(list(set(expert_knowledge)))
